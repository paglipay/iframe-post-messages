<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>

    <style>
      .hide {
        display: none;
      }

      .show {
        display: block;
        border: black;
        border-style: solid;
        text-align: center;
      }
    </style>
  </head>

  <body>
    <div id="body-div">
      <h1>Frame 1</h1>
      <div id="received-message1" name="received-message" class="show">
        <h1>1</h1>
      </div>
      <div id="received-message2" name="received-message" class="hide">
        <h1>2</h1>
      </div>
      <div id="received-message3" name="received-message" class="hide">
        <h1>3</h1>
      </div>
    </div>
  </body>
  <script>
    function displayMessage(evt) {
      let id = 0;
      if (evt.origin !== "http://127.0.0.1:5500") {
        console.log("Incorrect evt.origin");
      } else {
        id = evt.data.id;
      }
      const collection = document.getElementsByName("received-message");
      for (let i = 0; i < collection.length; i++) {
        if (i == id) {
          collection[i].setAttribute("class", "show");
        } else {
          collection[i].setAttribute("class", "hide");
        }
      }
      console.log("evt.data: ", evt.data);
    }

    function xml2json(xml) {
      try {
        let obj = {};
        // var nodeAtts;
        if (xml.children.length > 0) {
          for (var i = 0; i < xml.children.length; i++) {
            var item = xml.children.item(i);
            console.log("item: ", item);
            var nodeName = item.nodeName.toLowerCase();
            var nodeId = item.id;
            console.log("nodeName: ", nodeName, "nodeId: ", nodeId);

            if (typeof obj[nodeName] == "undefined") {

              obj[nodeName] = xml2json(item);

            } else {
              if (typeof obj[nodeName].push == "undefined") {
                var old = obj[nodeName];

                obj[nodeName] = [];
                obj[nodeName].push(old);
              }
              obj[nodeName].push(xml2json(item));
              
            }
          }
        } else {
          obj = xml.textContent;
        }
        return obj;
      } catch (e) {
        console.log(e.message);
      }
    }

    // const Elem = (e) => ({
    //   tagName: e.tagName,
    //   textContent: e.textContent,
    //   attributes: Array.from(e.attributes, ({ name, value }) => [name, value]),
    //   children: Array.from(e.children, Elem),
    // });

    // const html2json = (e) => JSON.stringify(Elem(e), null, "  ");

    if (window.addEventListener) {
      // For standards-compliant web browsers
      window.addEventListener("message", displayMessage, false);
    } else {
      window.attachEvent("onmessage", displayMessage);
    }
    window.onload = function () {
      //   const col = document.getElementsByName("received-message");
      const col = document.getElementById("body-div");
      //   const col = document.getElementsByTagName("body");
      console.log(col);
      let data = [];
      for (let i = 0; i < col.length; i++) {
        data.push(i);
      }
      var iframeWin =
        parent.document.getElementById("da-iframe2").contentWindow;
      iframeWin.postMessage(xml2json(col), "http://127.0.0.1:5500");
    };
  </script>
</html>
